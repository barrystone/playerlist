{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","player","className","Unsearched","style","width","height","src","PhotoUrl","alt","FirstName","LastName","Position","Jersey","CardList","roster","map","i","key","SearchBox","onSearchChange","onSearchClick","type","placeholder","onChange","onKeyPress","e","Button","variant","justify","onClick","Scroll","children","overflow","overflowY","border","paddingRight","boxSizing","ErrorBoundary","props","state","hasError","error","info","this","setState","Component","App","useState","searchfield","setSearchfield","rosterData","setRosterData","filterRoster","setFilterRoster","useEffect","console","log","toLowerCase","includes","produce","draftPlayer","event","target","value","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1fa6fa86.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({ player }) => {\r\n  return (\r\n    <div\r\n      className={\r\n        \"tc dib br3 pa3 ma2 grow bw2 shadow-5\" +\r\n        (player.Unsearched ? \"\" : \" bg-light-gray\")\r\n      }\r\n      style={{ width: \"216px\", height: \"230px\" }}\r\n    >\r\n      <img src={player.PhotoUrl} alt=\"photo\" />\r\n      <div className=\" mr1 ml1\">\r\n        <h3 className=\"tc\">\r\n          {player.FirstName}&nbsp;{player.LastName}\r\n        </h3>\r\n        <h4>\r\n          {player.Position}&nbsp;&nbsp;{player.Jersey}\r\n        </h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ roster }) => {\r\n  // if (true) {\r\n  //   throw new Error(\"Noooooo!!\");\r\n  // }\r\n\r\n  return (\r\n    <div className=\"flex flex-wrap ml4\">\r\n      {roster.map((player, i) => (\r\n        <Card player={player} key={i} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport { Button, Box } from \"@material-ui/core\";\r\n\r\nconst SearchBox = ({ onSearchChange, onSearchClick }) => {\r\n  return (\r\n    <div className=\"pa2 ml3\">\r\n      <input\r\n        className=\"pa3 ba\"\r\n        type=\"search\"\r\n        placeholder=\"Player name\"\r\n        onChange={onSearchChange}\r\n        onKeyPress={(e) => (e.key == \"Enter\" ? onSearchClick() : null)}\r\n      />\r\n      &nbsp;&nbsp;\r\n      {/* <Box ml={3}> */}\r\n      <Button\r\n        variant=\"contained\"\r\n        justify=\"space-between\"\r\n        onClick={onSearchClick}\r\n      >\r\n        search\r\n      </Button>\r\n      {/* </Box> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = ({ children }) => {\r\n  return (\r\n    <div style={{ overflow: \"hidden\", height: \"100%\", width: \"100%\" }}>\r\n      <div\r\n        //   className=\"overflow-container\"\r\n        style={{\r\n          overflowY: \"auto\",\r\n          //   overflowY: \"scroll\",\r\n          border: \"1px solid black\",\r\n          width: \"100%\",\r\n          paddingRight: \"15px\",\r\n          height: \"580px\",\r\n          boxSizing: \"content-box\",\r\n        }}\r\n      >\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n  //   static getDerivedStateFromError(error) {\r\n  //     // 更新 state 以至於下一個 render 會顯示 fallback UI\r\n  //     return { hasError: true };\r\n  //   }\r\n  render() {\r\n    return this.state.hasError ? <h1>something wrong</h1> : this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { produce } from \"immer\";\r\nimport \"../assets/css/App.css\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\nimport roster from \"../_data/roster/Rockets\";\r\n// import roster from \"./_data/roster/Warriors.json\";\r\n// import roster from \"./_data/roster/Mavericks.json\";\r\n// import roster from \"./_data/roster/Clippers.json\";\r\n// import roster from \"./_data/roster/Spurs.json\";\r\n// import roster from \"./_data/roster/Lakers.json\";\r\n\r\nconst App = () => {\r\n  const [searchfield, setSearchfield] = useState(\"\");\r\n  const [rosterData, setRosterData] = useState([]);\r\n  let [filterRoster, setFilterRoster] = useState([]);\r\n\r\n  const fetchData = async () => {\r\n    const data = await fetch(\r\n      `https://api.sportsdata.io/v3/nba/stats/json/Players/HOU?key=${process.env.REACT_APP_SPORTDATAIO_API_KEY_2}`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        return result;\r\n      });\r\n    setRosterData(data);\r\n  };\r\n  useEffect(() => {\r\n    // fetchData();\r\n    setRosterData(roster);\r\n    console.log(\"fetching\");\r\n  }, []);\r\n  useEffect(() => {\r\n    setFilterRoster(rosterData);\r\n    console.log(\"initial setFilterRoster\");\r\n  }, [rosterData]);\r\n  const onSearchChange = (event) => {\r\n    setSearchfield(event.target.value);\r\n  };\r\n  useEffect(() => {\r\n    setFilterRoster(\r\n      rosterData.map((player) =>\r\n        (player.FirstName + \" \" + player.LastName)\r\n          .toLowerCase()\r\n          .includes(searchfield.toLowerCase())\r\n          ? player\r\n          : produce(player, (draftPlayer) => {\r\n              draftPlayer.Unsearched = true;\r\n            })\r\n      )\r\n    );\r\n    console.log(\"onChange setFilterRoster\");\r\n  }, [searchfield]);\r\n  const onSearchClick = () => {\r\n    setFilterRoster(\r\n      rosterData.filter((player) =>\r\n        (player.FirstName + \" \" + player.LastName)\r\n          .toLowerCase()\r\n          .includes(searchfield.toLowerCase())\r\n      )\r\n    );\r\n    console.log(\"onClick setFilterRoster\");\r\n  };\r\n  return (\r\n    <div className=\"tc\">\r\n      <h1 className=\"f1 ma3\">Roster</h1>\r\n      <SearchBox\r\n        onSearchChange={onSearchChange}\r\n        onSearchClick={onSearchClick}\r\n      />\r\n      <Scroll>\r\n        <ErrorBoundary>\r\n          <CardList roster={filterRoster ? filterRoster : rosterData} />\r\n        </ErrorBoundary>\r\n      </Scroll>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport \"@material-ui/core\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}